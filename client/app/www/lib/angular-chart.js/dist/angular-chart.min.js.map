{"version":3,"sources":["angular-chart.min.js"],"names":["chart","type","restrict","scope","data","labels","options","series","colours","getColour","chartType","legend","click","hover","link","elem","resetChart","newVal","oldVal","isEmpty","angular","equals","destroy","createChart","container","document","createElement","className","replaceWith","appendChild","window","G_vmlCanvasManager","initElement","$watch","length","Array","isArray","canUpdateChart","updateChart","$on","reduce","sum","carry","val","getRandomColour","getColours","cvs","ctx","getContext","getDataSets","getData","Chart","$emit","forEach","action","getEventHandler","setLegend","evt","atEvent","getPointsAtEvent","getBarsAtEvent","getSegmentsAtEvent","activePoints","call","$apply","copy","defaults","global","push","map","convertColour","colour","hexToRgb","substr","getRandomInt","fillColor","rgba","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","min","max","Math","floor","random","alpha","concat","join","hex","bigint","parseInt","r","g","b","datasets","item","i","dataSet","label","value","color","highlight","$parent","parent","$oldLegend","find","generateLegend","append","values","dataset","points","bars","dataItem","j","segments","segment","update","Object","keys","responsive","multiTooltipTemplate","module","directive"],"mappings":"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","file":"angular-chart.min.js","sourcesContent":["(function () {\n  'use strict';\n\n  Chart.defaults.global.responsive = true;\n  Chart.defaults.global.multiTooltipTemplate = '<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>';\n\n  Chart.defaults.global.colours = [\n    '#97BBCD', // blue\n    '#DCDCDC', // light grey\n    '#F7464A', // red\n    '#46BFBD', // green\n    '#FDB45C', // yellow\n    '#949FB1', // grey\n    '#4D5360'  // dark grey\n  ];\n\n  angular.module('chart.js', [])\n    .directive('chartBase', function () { return chart(); })\n    .directive('chartLine', function () { return chart('Line'); })\n    .directive('chartBar', function () { return chart('Bar'); })\n    .directive('chartRadar', function () { return chart('Radar'); })\n    .directive('chartDoughnut', function () { return chart('Doughnut'); })\n    .directive('chartPie', function () { return chart('Pie'); })\n    .directive('chartPolarArea', function () { return chart('PolarArea'); });\n\n  function chart (type) {\n    return {\n      restrict: 'CA',\n      scope: {\n        data: '=',\n        labels: '=',\n        options: '=',\n        series: '=',\n        colours: '=?',\n        getColour: '=?',\n        chartType: '=',\n        legend: '@',\n        click: '=',\n        hover: '='\n      },\n      link: function (scope, elem/*, attrs */) {\n        var chart, container = document.createElement('div');\n        container.className = 'chart-container';\n        elem.replaceWith(container);\n        container.appendChild(elem[0]);\n\n        if (typeof window.G_vmlCanvasManager === 'object' && window.G_vmlCanvasManager !== null) {\n          if (typeof window.G_vmlCanvasManager.initElement === 'function') {\n            window.G_vmlCanvasManager.initElement(elem[0]);\n          }\n        }\n\n        // Order of setting \"watch\" matter\n\n        scope.$watch('data', function (newVal, oldVal) {\n          if (! newVal || ! newVal.length || (Array.isArray(newVal[0]) && ! newVal[0].length)) return;\n          var chartType = type || scope.chartType;\n          if (! chartType) return;\n\n          if (chart) {\n            if (canUpdateChart(newVal, oldVal)) return updateChart(chart, newVal, scope);\n            chart.destroy();\n          }\n\n          chart = createChart(chartType, scope, elem);\n        }, true);\n\n        scope.$watch('series', resetChart, true);\n        scope.$watch('labels', resetChart, true);\n        scope.$watch('options', resetChart, true);\n        scope.$watch('colours', resetChart, true);\n\n        scope.$watch('chartType', function (newVal, oldVal) {\n          if (isEmpty(newVal)) return;\n          if (angular.equals(newVal, oldVal)) return;\n          if (chart) chart.destroy();\n          chart = createChart(newVal, scope, elem);\n        });\n\n        scope.$on('$destroy', function () {\n          if (chart) chart.destroy();\n        });\n\n        function resetChart (newVal, oldVal) {\n          if (isEmpty(newVal)) return;\n          if (angular.equals(newVal, oldVal)) return;\n          var chartType = type || scope.chartType;\n          if (! chartType) return;\n\n          // chart.update() doesn't work for series and labels\n          // so we have to re-create the chart entirely\n          if (chart) chart.destroy();\n\n          chart = createChart(chartType, scope, elem);\n        }\n      }\n    };\n  }\n\n  function canUpdateChart(newVal, oldVal) {\n    if (newVal && oldVal && newVal.length && oldVal.length) {\n      return Array.isArray(newVal[0]) ?\n      newVal.length === oldVal.length && newVal[0].length === oldVal[0].length :\n        oldVal.reduce(sum, 0) > 0 ? newVal.length === oldVal.length : false;\n    }\n    return false;\n  }\n\n  function sum (carry, val) {\n    return carry + val;\n  }\n\n  function createChart (type, scope, elem) {\n    if (! scope.data || ! scope.data.length) return;\n    scope.getColour = typeof scope.getColour === 'function' ? scope.getColour : getRandomColour;\n    scope.colours = getColours(scope);\n    var cvs = elem[0], ctx = cvs.getContext('2d');\n    var data = Array.isArray(scope.data[0]) ?\n      getDataSets(scope.labels, scope.data, scope.series || [], scope.colours) :\n      getData(scope.labels, scope.data, scope.colours);\n    var chart = new Chart(ctx)[type](data, scope.options || {});\n    scope.$emit('create', chart);\n\n    ['hover', 'click'].forEach(function (action) {\n      if (scope[action]) cvs[action === 'click' ? 'onclick' : 'onmousemove'] = getEventHandler(scope, chart, action);\n    });\n    if (scope.legend && scope.legend !== 'false') setLegend(elem, chart);\n    return chart;\n  }\n\n  function getEventHandler (scope, chart, action) {\n    return function (evt) {\n      var atEvent = chart.getPointsAtEvent || chart.getBarsAtEvent || chart.getSegmentsAtEvent;\n      if (atEvent) {\n        var activePoints = atEvent.call(chart, evt);\n        scope[action](activePoints, evt);\n        scope.$apply();\n      }\n    };\n  }\n\n  function getColours (scope) {\n    var colours = angular.copy(scope.colours) || angular.copy(Chart.defaults.global.colours);\n    while (colours.length < scope.data.length) {\n      colours.push(scope.getColour());\n    }\n    return colours.map(convertColour);\n  }\n\n  function convertColour (colour) {\n    if (typeof colour === 'object' && colour !== null) return colour;\n    if (typeof colour === 'string' && colour[0] === '#') return getColour(hexToRgb(colour.substr(1)));\n    return getRandomColour();\n  }\n\n  function getRandomColour () {\n    var colour = [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n    return getColour(colour);\n  }\n\n  function getColour (colour) {\n    return {\n      fillColor: rgba(colour, 0.2),\n      strokeColor: rgba(colour, 1),\n      pointColor: rgba(colour, 1),\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: rgba(colour, 0.8)\n    };\n  }\n\n  function getRandomInt (min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  function rgba(colour, alpha) {\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n  }\n\n  // Credit: http://stackoverflow.com/a/11508164/1190235\n  function hexToRgb (hex) {\n    var bigint = parseInt(hex, 16),\n      r = (bigint >> 16) & 255,\n      g = (bigint >> 8) & 255,\n      b = bigint & 255;\n\n    return [r, g, b];\n  }\n\n  function getDataSets (labels, data, series, colours) {\n    return {\n      labels: labels,\n      datasets: data.map(function (item, i) {\n        var dataSet = angular.copy(colours[i]);\n        dataSet.label = series[i];\n        dataSet.data = item;\n        return dataSet;\n      })\n    };\n  }\n\n  function getData (labels, data, colours) {\n    return labels.map(function (label, i) {\n      return {\n        label: label,\n        value: data[i],\n        color: colours[i].strokeColor,\n        highlight: colours[i].pointHighlightStroke\n      };\n    });\n  }\n\n  function setLegend (elem, chart) {\n    var $parent = elem.parent(),\n        $oldLegend = $parent.find('chart-legend'),\n        legend = '<chart-legend>' + chart.generateLegend() + '</chart-legend>';\n    if ($oldLegend.length) $oldLegend.replaceWith(legend);\n    else $parent.append(legend);\n  }\n\n  function updateChart (chart, values, scope) {\n    if (Array.isArray(scope.data[0])) {\n      chart.datasets.forEach(function (dataset, i) {\n        (dataset.points || dataset.bars).forEach(function (dataItem, j) {\n          dataItem.value = values[i][j];\n        });\n      });\n    } else {\n      chart.segments.forEach(function (segment, i) {\n        segment.value = values[i];\n      });\n    }\n    chart.update();\n    scope.$emit('update', chart);\n  }\n\n  function isEmpty (value) {\n    return ! value ||\n      (Array.isArray(value) && ! value.length) ||\n      (typeof value === 'object' && ! Object.keys(value).length);\n  }\n\n})();\n"],"sourceRoot":"/source/"}